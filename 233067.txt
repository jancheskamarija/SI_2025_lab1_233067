233067
ДЕЛ 2
13. Во локалниот репозиториум извршив командата git fetch origin за да ги симнам најновите податоци од мојот GitHub репозиториум. Оваа команда креира tracker гранки за сите три гранки кои ги креирав преку Kanban проектот на GitHub. Всушност новите гранки што ги направив ги поврзав со локалниот репозиториум.

14. Користејќи ја командата 
git checkout 8-mark-a-task-as-completed-by-name
се префрлив на гранката 8-mark-a-task-as-completed-by-name на мојот локален репозиториум и ја поврзав со истата гранка на GitHub и така сите промени што ќе ги направам на локалната гранка ќе бидат синхронизирани со гранката на GitHub.

15. Додадов код за методата public void markTaskCompleted(String name). Оваа метода ја означува задачата како завршена на основа на името на задачата. Ако задачата постои, таа ќе се означи како завршена и ќе се испечати порака за успешност, во спротивно ќе печати порака дека задачата со тоа име не може да се пронајде.

16. Прво ги додадов промените што ги направив на кодот со командата: git add.
Потоа направив commit за да ги запишам промените во локалниот репозиториум со следната команда: git commit -m "Имплементирана е функцијата markTaskCompleted" (Ова е за да ја зачувам логиката што ја имплементирав за функцијата markTaskCompleted, која ја означува задачата како завршена).

17. За да ги пуштам промените на GitHub, ја користев командата: git push origin 8-mark-a-task-as-completed-by-name ова ја синхронизира локалната гранка со оддалечениот репозиториум.

18. За овој чекор, јас креирав pull request од гранката што беше поврзана со избраното issue, така што ја отворив врската од самото issue и кликнав на “Create pull request”.
Се појави pull request-от во листата, при што се прикажуваше пораката од последниот commit.

19. Ги повторив претходните чекори само со соодветна логика за 15 чекор.

20, 21 Ги споив промените и имплементирав функционалности за Mark tasks as completed by name и Find the highest priority unfinished task. Овие промени потоа се префрлија во колоната 'Done' на Канбан таблата.

22. Се префрлив на гранката master со помош на командата git checkout master, потоа ја споив преостанатата трета гранка (4-sort-tasks-by-priority) со master локално: git merge 4-sort-tasks-by-priority.
Спојувањето беше успешно со „Fast-forward“ и немаше конфликти.

23. За да ја синхронизирам гранката master со оддалечениот репозиториум, користев командата: git push origin master
Ова не успеа веднаш бидејќи на оддалечениот репозиториум имаше нови промени, па направив pull.

24. Потоа ја синхронизирав локалната гранка со оддалечениот репозиториум со git pull origin master Ова ги извлече најновите промени од оддалечениот репозиториум и ги спои со моите локални промени без конфликти. После ова, pull request-от беше затворен автоматски, а соодветниот issue се префрли во фазата „Done“.

25. Досегашните git логови во датотеката logs.txt, ги додадов со командата: git log --oneline --graph --all > logs.txt




